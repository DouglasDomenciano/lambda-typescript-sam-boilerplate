import { createPool, Pool, QueryError, ResultSetHeader, RowDataPacket } from "mysql2/promise";

export interface IQuery {
    sql: string;
    values: any[];
}

// üîπ Vari√°vel global para armazenar a pool de conex√µes
let pool: any = null;

// üîπ Fun√ß√£o para obter a conex√£o reutiliz√°vel
export const getDatabaseConnection = async (): Promise<(sql: string, values: any[]) => Promise<any>> => {
    if (!pool) {
        console.log("üõ†Ô∏è Criando nova conex√£o no Lambda Layer...");
        pool = createPool({
            host: "host.docker.internal",
            port: 3306,
            user: "root",
            password: "root",
            database: "teste",
            waitForConnections: true,
            connectionLimit: 10,
            queueLimit: 0,
        });
    } else {
        console.log("‚ôªÔ∏è Reutilizando conex√£o do Layer...");
    }

    return async (sql: string, values: any[]): Promise<any> => {
        try {
            const [results] = await pool.query(sql, values);
            return results;
        } catch (error) {
            throw error;
        }
    };
};
